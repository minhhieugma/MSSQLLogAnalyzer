// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Insert Row")]
    public partial class InsertRowFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "InsertRow.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Insert Row", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can track inserting a single row")]
        public virtual void ICanTrackInsertingASingleRow()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can track inserting a single row", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 testRunner.Given("I created the default database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
 testRunner.And("the \'dbo.Users\' has \'10\' rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 6
 testRunner.When("I execute \"INSERT INTO dbo.Users(FullName, CreatedDate) VALUES(\'Name 11\', \'2023-0" +
                        "3-19 03:06:33.227\');\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.Then("the \'dbo.Users\' has \'11\' rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "ObjectName",
                            "Operation",
                            "Type",
                            "RedoSQL",
                            "UndoSQL"});
                table3.AddRow(new string[] {
                            "[dbo].[Users]",
                            "LOP_INSERT_ROWS",
                            "DML",
                            "set identity_insert [dbo].[Users] on; insert into [dbo].[Users]([Id],[FullName],[" +
                                "CreatedDate]) values(1002,N\'Name 11\',\'2023-03-19 03:06:33.227\'); set identity_in" +
                                "sert [dbo].[Users] off;",
                            "delete top(1) from [dbo].[Users] where [Id]=1002 and [FullName]=N\'Name 11\' and [C" +
                                "reatedDate]=\'2023-03-19 03:06:33.227\';"});
#line 8
 testRunner.And("Transaction logs in the last 5 min should be", ((string)(null)), table3, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can track inserting two rows")]
        public virtual void ICanTrackInsertingTwoRows()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can track inserting two rows", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 13
 testRunner.Given("I created the default database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
 testRunner.And("the \'dbo.Users\' has \'10\' rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.When("I execute \"INSERT INTO dbo.Users(FullName, CreatedDate) VALUES(\'Name 11\', \'2023-0" +
                        "3-19 03:06:33.227\');\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
   testRunner.And("I execute \"INSERT INTO dbo.Users(FullName, CreatedDate) VALUES(\'Name 12\', \'2023-0" +
                        "3-19 03:06:33.227\');\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
 testRunner.Then("the \'dbo.Users\' has \'12\' rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "ObjectName",
                            "Operation",
                            "Type",
                            "RedoSQL",
                            "UndoSQL"});
                table4.AddRow(new string[] {
                            "[dbo].[Users]",
                            "LOP_INSERT_ROWS",
                            "DML",
                            "set identity_insert [dbo].[Users] on; insert into [dbo].[Users]([Id],[FullName],[" +
                                "CreatedDate]) values(1002,N\'Name 11\',\'2023-03-19 03:06:33.227\'); set identity_in" +
                                "sert [dbo].[Users] off;",
                            "delete top(1) from [dbo].[Users] where [Id]=1002 and [FullName]=N\'Name 11\' and [C" +
                                "reatedDate]=\'2023-03-19 03:06:33.227\';"});
                table4.AddRow(new string[] {
                            "[dbo].[Users]",
                            "LOP_INSERT_ROWS",
                            "DML",
                            "set identity_insert [dbo].[Users] on; insert into [dbo].[Users]([Id],[FullName],[" +
                                "CreatedDate]) values(1003,N\'Name 12\',\'2023-03-19 03:06:33.227\'); set identity_in" +
                                "sert [dbo].[Users] off;",
                            "delete top(1) from [dbo].[Users] where [Id]=1003 and [FullName]=N\'Name 12\' and [C" +
                                "reatedDate]=\'2023-03-19 03:06:33.227\';"});
#line 18
 testRunner.And("Transaction logs in the last 5 min should be", ((string)(null)), table4, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
