// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Update Row")]
    public partial class UpdateRowFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "UpdateRow.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Update Row", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can track updating a single row")]
        public virtual void ICanTrackUpdatingASingleRow()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can track updating a single row", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 testRunner.Given("I created the default database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
 testRunner.And("the \'dbo.Users\' has \'10\' rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 6
 testRunner.When("I execute \"UPDATE dbo.Users SET FullName = \'Name 5555\' WHERE FullName = \'Name 5\';" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 7
 testRunner.Then("the \'dbo.Users\' has \'10\' rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "ObjectName",
                            "Operation",
                            "Type",
                            "RedoSQL",
                            "UndoSQL"});
                table6.AddRow(new string[] {
                            "[dbo].[Users]",
                            "LOP_MODIFY_ROW",
                            "DML",
                            "update top(1) [dbo].[Users] set [FullName]=N\'Name 5555\' where [Id]=5 and [FullNam" +
                                "e]=N\'Name 5\' and [CreatedDate]=\'2023-03-14 04:08:39.547\';",
                            "update top(1) [dbo].[Users] set [FullName]=N\'Name 5\' where [Id]=5 and [FullName]=" +
                                "N\'Name 5555\' and [CreatedDate]=\'2023-03-14 04:08:39.547\';"});
#line 8
 testRunner.And("Transaction logs in the last 5 min should be", ((string)(null)), table6, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can track updating two rows")]
        public virtual void ICanTrackUpdatingTwoRows()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can track updating two rows", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 13
 testRunner.Given("I created the default database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 14
 testRunner.And("the \'dbo.Users\' has \'10\' rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
 testRunner.When("I execute \"UPDATE dbo.Users SET FullName = \'Name 5555\' WHERE FullName = \'Name 5\';" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 16
  testRunner.And("I execute \"UPDATE dbo.Users SET FullName = \'Name 6666\' WHERE FullName = \'Name 6\';" +
                        "\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
 testRunner.Then("the \'dbo.Users\' has \'10\' rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "ObjectName",
                            "Operation",
                            "Type",
                            "RedoSQL",
                            "UndoSQL"});
                table7.AddRow(new string[] {
                            "[dbo].[Users]",
                            "LOP_MODIFY_ROW",
                            "DML",
                            "update top(1) [dbo].[Users] set [FullName]=N\'Name 5555\' where [Id]=5 and [FullNam" +
                                "e]=N\'Name 5\' and [CreatedDate]=\'2023-03-14 04:08:39.547\';",
                            "update top(1) [dbo].[Users] set [FullName]=N\'Name 5\' where [Id]=5 and [FullName]=" +
                                "N\'Name 5555\' and [CreatedDate]=\'2023-03-14 04:08:39.547\';"});
                table7.AddRow(new string[] {
                            "[dbo].[Users]",
                            "LOP_MODIFY_ROW",
                            "DML",
                            "update top(1) [dbo].[Users] set [FullName]=N\'Name 6666\' where [Id]=6 and [FullNam" +
                                "e]=N\'Name 6\' and [CreatedDate]=\'2023-03-14 04:08:40.927\';",
                            "update top(1) [dbo].[Users] set [FullName]=N\'Name 6\' where [Id]=6 and [FullName]=" +
                                "N\'Name 6666\' and [CreatedDate]=\'2023-03-14 04:08:40.927\';"});
#line 18
 testRunner.And("Transaction logs in the last 5 min should be", ((string)(null)), table7, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can track update statement when I use like condition to filter a single row")]
        public virtual void ICanTrackUpdateStatementWhenIUseLikeConditionToFilterASingleRow()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can track update statement when I use like condition to filter a single row", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 24
 testRunner.Given("I created the default database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
 testRunner.And("the \'dbo.Users\' has \'10\' rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
 testRunner.When("I execute \"UPDATE dbo.Users SET FullName = \'Name 5555\' WHERE FullName LIKE \'%Name" +
                        " 5%\';\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
 testRunner.Then("the \'dbo.Users\' has \'10\' rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "ObjectName",
                            "Operation",
                            "Type",
                            "RedoSQL",
                            "UndoSQL"});
                table8.AddRow(new string[] {
                            "[dbo].[Users]",
                            "LOP_MODIFY_ROW",
                            "DML",
                            "update top(1) [dbo].[Users] set [FullName]=N\'Name 5555\' where [Id]=5 and [FullNam" +
                                "e]=N\'Name 5\' and [CreatedDate]=\'2023-03-14 04:08:39.547\';",
                            "update top(1) [dbo].[Users] set [FullName]=N\'Name 5\' where [Id]=5 and [FullName]=" +
                                "N\'Name 5555\' and [CreatedDate]=\'2023-03-14 04:08:39.547\';"});
#line 28
 testRunner.And("Transaction logs in the last 5 min should be", ((string)(null)), table8, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("I can track update statement when the where statement takes multi rows")]
        public virtual void ICanTrackUpdateStatementWhenTheWhereStatementTakesMultiRows()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I can track update statement when the where statement takes multi rows", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 33
 testRunner.Given("I created the default database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 34
 testRunner.And("the \'dbo.Users\' has \'10\' rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.When("I execute \"UPDATE dbo.Users SET FullName = FullName + \' Updated\' WHERE FullName =" +
                        " \'Name 5\' OR FullName = \'Name 6\';\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
 testRunner.Then("the \'dbo.Users\' has \'10\' rows", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "ObjectName",
                            "Operation",
                            "Type",
                            "RedoSQL",
                            "UndoSQL"});
                table9.AddRow(new string[] {
                            "[dbo].[Users]",
                            "LOP_MODIFY_ROW",
                            "DML",
                            "update top(1) [dbo].[Users] set [FullName]=N\'Name 6 Updated\' where [Id]=6 and [Fu" +
                                "llName]=N\'Name 6\' and [CreatedDate]=\'2023-03-14 04:08:40.927\';",
                            "update top(1) [dbo].[Users] set [FullName]=N\'Name 6\' where [Id]=6 and [FullName]=" +
                                "N\'Name 6 Updated\' and [CreatedDate]=\'2023-03-14 04:08:40.927\';"});
                table9.AddRow(new string[] {
                            "[dbo].[Users]",
                            "LOP_MODIFY_ROW",
                            "DML",
                            "update top(1) [dbo].[Users] set [FullName]=N\'Name 5 Updated\' where [Id]=5 and [Fu" +
                                "llName]=N\'Name 5\' and [CreatedDate]=\'2023-03-14 04:08:39.547\';",
                            "update top(1) [dbo].[Users] set [FullName]=N\'Name 5\' where [Id]=5 and [FullName]=" +
                                "N\'Name 5 Updated\' and [CreatedDate]=\'2023-03-14 04:08:39.547\';"});
#line 37
 testRunner.And("Transaction logs in the last 5 min should be", ((string)(null)), table9, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
